hello word
this is change;	
add discribtion;
第一步，用命令git add告诉Git，把文件添加到仓库：
git add readme.txt
第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

版本回退：

git log命令显示从最近到最远的提交日志，

首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

Git提供了一个命令git reflog用来记录你的每一次命令：

小结
现在总结一下：

•HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。


•穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。



•要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

git log -- README.md   查看某个 文件的提交记录

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：

git checkout -- file可以丢弃工作区的修改：

Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。  错删文件，没有提交同样适用

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
 
 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


//从远程库克隆git仓库
git clone git@github.com:michaelliao/gitskills.git

分支管理：

创建分支：git checkout -b dev     创建开发分支并且切换到分支dev
切换分支：git checkout dev  切换分支到dev
查看当前分支：git branch
创建分支：git branch dev 创建开发分支


dev分支合并到master分支： git merge dev

删除分支：git branch -d dev 
	
修复bug分支

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


用git log --graph命令可以看到分支合并图。

合并分支冲突，解决冲突文件，add 之后 commit  删除分支


合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。--推荐使用


【git 删除远程分支】

git push origin :br  (origin 后面有空格)


【bug修复流程】
1.开发流保存现场  git stash
2.切换分支到master  新建bug修复分支
3.在bug分支修改，提交代码，合并分支到master,删除bug1分支
4.切换分支到dev ，恢复现场 

  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

	另一种方式是用git stash pop，恢复的同时把stash内容也删了：
	
	  你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

   $ git stash apply stash@{0}

5.继续修改代码，提交，合并分支到master,删除分支


如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

【代码同步】
1.从远程库 clone仓库
2.git checkout dev
3.git pull  抓取分支代码

注解：
•查看远程库信息，使用git remote -v；


•本地新建的分支如果不推送到远程，对其他人就是不可见的；


•从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；


•在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；


•建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；


•从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


【查看历史版本提交记录】

方法是找到历史提交的commit id，然后打上就可以了：

$ git log --pretty=oneline --abbrev-commit

【打标签】

git tag v0.9 6224937

【查看标签】

git tag

git show tag_name








